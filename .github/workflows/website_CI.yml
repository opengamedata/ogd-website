name: OGD-Website CI Script

# Controls when the action will run. Triggers the workflow on creation of 
# tags.  Creating new 'versions' via github is the most straightforward 
# way of doing this.
on:
  workflow_dispatch: # Allow manual trigger of this workflow from the Actions tab
    # inputs:
    #   custom_branch:
    #     description: "Custom API Branch: Set the site to use an API branch different from the website branch being deployed."
    #     required: false
  push: # Trigger automatically when we do a merge to production
    paths:
    - '.github/workflows/website_CI.yml'
    - 'site/**'
    - 'gulpfile.js'
    - 'package.json'

env:
  TARGET_HOST: ${{ vars.OGD_STAGING_HOST }}
  TARGET_PATH: ${{ vars.WEB_PATH }}${{ github.event.repository.name }}/${{ github.ref_name }}
  API_HOST:    ${{ vars.OGD_SERVICES_HOST }}
  API_PATH:    wsgi-bin/opengamedata-website-api/production/app.wsgi/
  
jobs:
  ci_deploy:
    name: CI Deploy of Website
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    steps:

    # 1. Local checkout & config
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        lfs: true  
    - name: Set up Config File
      uses: ./.github/actions/web_config
      with:
        api_base: https://${{env.API_HOST}}/${{env.API_PATH}}
    
    # 2. Build 
    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install libraries
      run: npm install
    - name: Build
      run: gulp build   

    # 3. Remote config & deploy
    - name: Install OpenConnect
      run: sudo apt-get -q update && sudo apt-get -q install openconnect
    - name: Connect to VPN
      run: echo ${{ secrets.VPN_PASS }} | sudo openconnect --protocol=gp -u ${{ secrets.VPN_USER}} --passwd-on-stdin soe.vpn.wisc.edu &

    - name: Setup Access Key
      run: |
        mkdir -p ~/.ssh
        echo '${{secrets.DEPLOY_KEY}}' >> ./key.txt
        chmod 600 ./key.txt
    - name: Ensure directory exists
      run: ssh -o StrictHostKeyChecking=no -t -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.TARGET_HOST }} "mkdir -p ${{ env.TARGET_PATH }}"
    
    - name: Upload to web server via rsync
      uses: burnett01/rsync-deployments@5.2
      with:
        switches: -vrct --delete --exclude-from 'rsync-exclude'
        path: /site/*
        remote_path: ${{ env.TARGET_PATH }}
        remote_host: ${{ env.TARGET_HOST }}
        remote_user: ${{ secrets.DEPLOY_USER }}
        remote_key: ${{ secrets.DEPLOY_KEY }}
    - name: Announce deploy
      run: echo "Deployed to ${{ env.TARGET_HOST }}${{ env.TARGET_PATH }}"
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ./*.log
    
